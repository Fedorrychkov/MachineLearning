import numpy as np
from matplotlib import pyplot as plt
from numpy import linalg  as lalg
import random as rnd


def Farr(x, n):
    F = np.ones((x.size, n))
    for i in range(x.size):
        for j in range(n):
            F[i][j] = x[i] ** j

    FT = np.column_stack((F, np.sin(x)))
    FT = np.column_stack((FT, np.cos(x)))
    FT = np.column_stack((FT, np.exp(x)))
    #print (FT)
    return F


def Fsin(x,n):#надо бы сделать матрицу sin и cos
    F2 = np.ones((x.size, n))

    for i in range(x.size):
        for j in range(n):
            F2[i][j] = 1
    return F2

dots=1000
x = np.linspace(0, 1, dots)

y = 20 * np.sin(2 * np.pi * 3 * x) + 100 * np.exp(x)
_err = 10 * np.random.rand(dots)
train = y + _err

ind = list(range(1000))
rnd.shuffle(ind)

train_x = x[ind[:600]]
train_t = train[ind[:600]]


valid_x = x[ind[600:800]]
valid_t = train[ind[600:800]]

test_x = x[ind[800:]]
test_t = train[ind[800:]]

el=21
Err = np.zeros(el)
k_er = np.linspace(0, el, el)

def calc_w(F):
    lam = 0  #
    I = np.identity(F.shape[1])  #
    w = ((lalg.inv(F.transpose().dot(F)) + I * lam).dot(F.transpose())).dot(train_x)  # train_t
    return w

def main():

    for i in range(12): #в цикле я посчитал w по training и эффективность lambda
        F = Farr(train_x, i)
        w = calc_w(F)
        new_y = F.dot(w)
        for j in range(w.size):
            Err[i] += (valid_t[j] - new_y[j]) ** 2
        Err[i] = Err[i] / 2
        print (np.shape(F))
    #print(Err)

#надо для lambda массив, К каждой ошибке должна соответствоват ьсвоя Лямбда и своё значение из матрицы F
#Найти в Err[i] минимальный элемент и узнать его индекс.
#Учитывая этот индекс нужно собрать лямбду и значение из F
#Заного вычислить W. и строить так же как в цикле выше



#for i in range(0,x.size):
 #   new_x=rnd.shuffle(train)

#train_set = new_x[0:600]
#valid_set = new_x[600:800]
#test_set = new_x[800:]

plt.figure()
plt.subplot(1,2,1)
plt.plot(train_x, train_t, '.g')
plt.plot(valid_x, valid_t, '.b')
plt.plot(test_x, test_t, '.y')
#plt.plot(x, new_y, 'r')
plt.subplot(1,2,2)
plt.plot(k_er, Err, 'g')
plt.show()